{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./node_modules/node-fetch/lib/index.es.js","webpack:///external \"stream\"","webpack:///external \"http\"","webpack:///external \"url\"","webpack:///external \"https\"","webpack:///external \"zlib\"","webpack:///external \"crypto\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","WrapSplashApi","options","_classCallCheck","this","API_LOCATION","BEARER_TOKEN_URL","Error","access_key","secret_key","redirect_uri","code","grant_type","hash","crypto","createHmac","digest","bearer_token","headers","Content-type","Authorization","X-WrapSplash-Header","availableOrders","availableOrientations","url","method","_nodeFetch2","default","then","res","status","statusText","message","json","catch","err","Promise","reject","fetchUrl","urlConfig","CURRENT_USER_PROFILE","username","first_name","last_name","email","location","bio","instagram_username","_url","UPDATE_CURRENT_USER_PROFILE","width","height","USERS_PUBLIC_PROFILE","isNaN","undefined","USERS_PORTFOLIO","replace","page","per_page","stats","resolution","quantity","order_by","includes","USERS_PHOTOS","encodeURIComponent","USERS_LIKED_PHOTOS","USERS_COLLECTIONS","USERS_STATISTICS","LIST_PHOTOS","LIST_CURATED_PHOTOS","id","rect","length","GET_A_PHOTO","typeof","collections","featured","query","orientation","count","GET_A_RANDOM_PHOTO","GET_A_PHOTO_STATISTICS","GET_A_PHOTO_DOWNLOAD_LINK","exif","assign","UPDATE_A_PHOTO","latitude","longitude","city","country","confidential","make","model","exposure_time","aperture_value","focal_length","iso_speed_ratings","LIKE_A_PHOTO","UNLIKE_A_PHOTO","SEARCH_PHOTOS","SEARCH_COLLECTIONS","SEARCH_USERS","STATS_TOTALS","STATS_MONTH","LIST_COLLECTIONS","LIST_FEATURED_COLLECTIONS","LIST_CURATED_COLLECTIONS","GET_COLLECTION","GET_CURATED_COLLECTION","GET_COLLECTION_PHOTOS","GET_CURATED_COLLECTION_PHOTOS","LIST_RELATED_COLLECTION","title","description","private_collection","CREATE_NEW_COLLECTION","UPDATE_EXISTING_COLLECTION","DELETE_COLLECTION","collection_id","photo_id","ADD_PHOTO_TO_COLLECTION","REMOVE_PHOTO_FROM_COLLECTION","__webpack_exports__","FetchError","BUFFER","Symbol","TYPE","Blob","[object Object]","blobParts","arguments","buffers","a","Number","element","buffer","Buffer","ArrayBuffer","isView","from","byteOffset","byteLength","String","push","concat","type","toLowerCase","test","size","start","end","relativeStart","relativeEnd","Math","max","min","span","slicedBuffer","slice","blob","systemError","errno","captureStackTrace","constructor","defineProperties","toStringTag","writable","create","Stream","PassThrough","convert","e","INTERNALS","Body","body","_this","_ref","_ref$size","_ref$timeout","timeout","isURLSearchParams","isBuffer","toString","disturbed","error","on","consumeBody","_this4","TypeError","resolve","alloc","accum","accumBytes","abort","resTimeout","setTimeout","chunk","clearTimeout","obj","append","delete","getAll","has","set","sort","clone","instance","p1","p2","bodyUsed","getBoundary","pipe","getTotalBytes","getLengthSync","_lengthRetrievers","hasKnownLength","buf","ct","_this2","JSON","parse","_this3","str","charset","exec","pop","convertBody","arrayBuffer","text","mixIn","proto","getOwnPropertyNames","desc","getOwnPropertyDescriptor","global","invalidTokenRegex","invalidHeaderCharRegex","validateName","validateValue","find","map","key","MAP","Headers","init","rawHeaders","raw","headerNames","keys","headerName","iterator","pairs","pair","Array","join","callback","thisArg","getHeaders","_pairs$i","createHeadersIterator","kind","k","entries","forEach","values","INTERNAL","target","HeadersIteratorPrototype","index","setPrototypeOf","getPrototypeOf","_INTERNAL","done","STATUS_CODES","INTERNALS$1","Response","opts","ok","_require$2","format_url","format","parse_url","INTERNALS$2","isRequest","input","Request","parsedURL","href","toUpperCase","inputBody","contentType","extractContentType","redirect","follow","compress","counter","agent","getNodeRequestOptions","request","protocol","hostname","contentLengthValue","totalBytes","__proto__","hostHeaderKey","exportNodeCompatibleHeaders","http","https","PassThrough$1","resolve_url","zlib","fetch","req","send","reqTimeout","finalize","once","socket","isArray","val","createHeadersLenient","isRedirect","statusCode","locationURL","requestOpts","response_options","statusMessage","codings","zlibOptions","flush","Z_SYNC_FLUSH","finishFlush","createGunzip","createInflate","createInflateRaw","dest","write","writeToStream","require"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Wrapsplash API wrapper v3.0.5 for Unspalsh API\r\n * written by: Sandeep Vattapparambil\r\n * email: sandeepv68@gmail.com\r\n * website: www.sandeepv.in\r\n * github: github.com/SandeepVattapparambil\r\n * license: MIT\r\n */\r\n\r\n/**\r\n * WrapSplashApi Module\r\n * @module WrapSplashApi\r\n */\r\n\r\n'use strict';\r\n//constants. \r\nimport fetch from 'node-fetch';\r\nimport crypto from 'crypto';\r\n//API Schema definitions\r\nimport urlConfig from '../config/url_config.json';\r\n\r\n/**\r\n * The main WrapSplash Class.\r\n * @class WrapSplash\r\n */\r\nclass WrapSplashApi {\r\n    /**\r\n     * The Options object constructor\r\n     * @param  {Object} options - The Options object to initialize the class.\r\n     */\r\n    constructor(options) {\r\n        //The location of the Unsplash API\r\n        this.API_LOCATION = 'https://api.unsplash.com/';\r\n        //The API to generate Unsplash API Bearer Token.\r\n        this.BEARER_TOKEN_URL = 'https://unsplash.com/oauth/token';\r\n\r\n        if (options) {\r\n            options = { ...{}, ...options };\r\n            this.access_key = (options.access_key ? options.access_key : (function () {\r\n                throw new Error('Access Key missing!');\r\n            }()));\r\n            this.secret_key = (options.secret_key ? options.secret_key : (function () {\r\n                throw new Error('Secret Key missing!');\r\n            }()));\r\n            this.redirect_uri = (options.redirect_uri ? options.redirect_uri : (function () {\r\n                throw new Error('Redirect URI missing!');\r\n            }()));\r\n            this.code = (options.code ? options.code : (function () {\r\n                throw new Error('Authorization Code missing!');\r\n            }()));\r\n            this.grant_type = 'authorization_code';\r\n            let hash = crypto.createHmac('sha256', this.access_key).digest('hex');\r\n            if (options.bearer_token) {\r\n                this.bearer_token = options.bearer_token;\r\n            }\r\n            this.headers = {\r\n                'Content-type': 'application/json',\r\n                'Authorization': (this.bearer_token ? 'Bearer ' + this.bearer_token : 'Client-ID ' + this.access_key),\r\n                'X-WrapSplash-Header': hash\r\n            };\r\n        } else {\r\n            throw new Error('Initilisation parameters missing!');\r\n        }\r\n        //Set available order_by options\r\n        this.availableOrders = ['latest', 'oldest', 'popular'];\r\n        //Sset available orientation options\r\n        this.availableOrientations = ['landscape', 'portrait', 'squarish'];\r\n    };\r\n\r\n    /**\r\n     * Heler function to fetch a given url\r\n     * @function fetchUrl\r\n     * @param {String} url - The url to be fetched (required).\r\n     * @param {String} method - The HTTP method to be used (required).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    fetchUrl(url, method) {\r\n        return fetch(url, {\r\n            method: method,\r\n            headers: (this.headers ? this.headers : '')\r\n        }).then(function (res) {\r\n            if (res.status === 204) {\r\n                let response = {\r\n                    status: res.status,\r\n                    statusText: res.statusText,\r\n                    message: 'Content Deleted'\r\n                };\r\n                return response;\r\n            }\r\n            if (res.status === 403) {\r\n                let response = {\r\n                    status: res.status,\r\n                    statusText: res.statusText,\r\n                    message: 'Rate Limit Exceeded'\r\n                };\r\n                return response;\r\n            }\r\n            return res.json();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Promise factory to generate a Bearer Token for write_access to private data.\r\n     * The Unsplash API uses OAuth2 to authenticate and authorize Unsplash users. \r\n     * Unsplash’s OAuth2 paths live at https://unsplash.com/oauth/.\r\n     * @function generateBearerToken\r\n     * @memberof UnsplashApi\r\n     * @returns {Object} - The user's Access Token JSON data object.\r\n     */\r\n    generateBeareToken() {\r\n        let url = this.BEARER_TOKEN_URL +\r\n            '?client_id=' + (this.access_key) +\r\n            '&client_secret=' + (this.secret_key) +\r\n            '&redirect_uri=' + (this.redirect_uri) +\r\n            '&code=' + (this.code) +\r\n            '&grant_type=' + (this.grant_type);\r\n        return this.fetchUrl(url, 'POST');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get the current User's profile.\r\n     * To access a user’s private data, the user is required to \r\n     * authorize the read_user scope. Without it, this request \r\n     * will return a 403 Forbidden response.\r\n     * Without a Bearer token (i.e. using a Client-ID token) this request \r\n     * will return a 401 Unauthorized response.\r\n     * @function getCurrentUserProfile\r\n     * @memberof UnsplashApi\r\n     * @returns {Object} - The JSON data Object.\r\n     */\r\n    getCurrentUserProfile() {\r\n        let url = this.API_LOCATION + urlConfig.CURRENT_USER_PROFILE;\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to update the current User's profile.\r\n     * This action requires the write_user scope. Without it, it will return a 403 Forbidden response.\r\n     * @function updateCurrentUserProfile\r\n     * @memberof UnsplashApi\r\n     * @param {String} username - The username of the current user (Optional).\r\n     * @param {String} first_name - The first name of the current user (Optional).\r\n     * @param {String} last_name - The last name of the current user (Optional).\r\n     * @param {String} email - The email id of the current user (Optional).\r\n     * @param {String} url - The Portfolio/personal URL of the current user (Optional).\r\n     * @param {String} location - The location of the current user (Optional).\r\n     * @param {String} bio - The About/bio of the current user (Optional).\r\n     * @param {String} instagram_username - The Instagram username of the current user (Optional).\r\n     * @returns {Object} - The JSON data Object.\r\n     */\r\n    updateCurrentUserProfile(username, first_name, last_name, email, url, location, bio, instagram_username) {\r\n        let _url = this.API_LOCATION + urlConfig.UPDATE_CURRENT_USER_PROFILE + '?' +\r\n            (username ? '?username=' + username : '') +\r\n            (first_name ? '&first_name=' + first_name : '') +\r\n            (last_name ? '&last_name=' + last_name : '') +\r\n            (email ? '&email=' + email : '') +\r\n            (url ? '&url=' + url : '') +\r\n            (location ? '&location=' + location : '') +\r\n            (bio ? '&bio=' + bio : '') +\r\n            (instagram_username ? '&instagram_username=' + instagram_username : '');\r\n        return this.fetchUrl(_url, 'PUT');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve public details on a given user.\r\n     * @function getPublicProfile\r\n     * @memberof UnsplashApi\r\n     * @param {*} username - The username of the particular user (required). \r\n     * @param {Number} width - The width of the profile image to be fetched (Optional).\r\n     * @param {Number} height - The height of the profile image to be fetched (Optional).\r\n     *                          Will be included in the 'profile_image' object as 'custom'. \r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    getPublicProfile(username, width, height) {\r\n        let url = this.API_LOCATION + urlConfig.USERS_PUBLIC_PROFILE + username +\r\n            '?w=' + (width && !isNaN(width) ? +width : '') +\r\n            '&h=' + (height && !isNaN(height) ? +height : '');\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a single user’s portfolio link.\r\n     * @function getUserPortfolio\r\n     * @memberof UnsplashApi\r\n     * @param {*} username - The username of the user to fetch the portfolio (required).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    getUserPortfolio(username) {\r\n        if (!username || username === '' || username === undefined) {\r\n            throw new Error('Parameter : username is required and cannot be empty!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.USERS_PORTFOLIO.replace(/:username/gi, username);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a list of photos uploaded by a particular user.\r\n     * @function getUserPhotos\r\n     * @memberof UnsplashApi\r\n     * @param {*} username - The username of the user to fetch the portfolio (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @param {Booelan} stats - Show the stats for each user’s photo (Optional; default: false).\r\n     * @param {String} resolution - The frequency of the stats (Optional; default: 'days').\r\n     * @param {Number} quantity - The amount of for each stat (Optional; default: 30).\r\n     * @param {String} order_by - The sort method for results (Optional, Valid values: latest, oldest, popular; defaults to: latest).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    getUserPhotos(username, page, per_page, stats, resolution, quantity, order_by) {\r\n        if (!username || username === '' || username === undefined) {\r\n            throw new Error('Parameter : username is required and cannot be empty!');\r\n        }\r\n        if (order_by !== undefined && !this.availableOrders.includes(order_by)) {\r\n            throw new Error('Parameter : order_by has an unsupported value!');\r\n        }\r\n        if (stats !== undefined && typeof (stats) !== 'boolean') {\r\n            throw new Error('Parameter : stats is a boolean or optional!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.USERS_PHOTOS.replace(/:username/gi, username) +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10) +\r\n            '&order_by=' + (order_by ? order_by : 'latest') +\r\n            '&stats=' + (stats ? stats : 'false') +\r\n            '&resolution=' + (resolution ? encodeURIComponent(resolution) : 'days') +\r\n            '&quantity=' + (quantity ? quantity : 30);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a list of photos liked by a user.\r\n     * @function getUserLikedPhotos\r\n     * @memberof UnsplashApi\r\n     * @param {*} username - The username of the user to fetch the portfolio (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @param {String} order_by - The sort method for results (Optional, Valid values: latest, oldest, popular; defaults to: latest).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    getUserLikedPhotos(username, page, per_page, order_by) {\r\n        if (!username || username === '' || username === undefined) {\r\n            throw new Error('Parameter : username is required and cannot be empty!');\r\n        }\r\n        if (order_by !== undefined && !this.availableOrders.includes(order_by)) {\r\n            throw new Error('Parameter : order_by has an unsupported value!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.USERS_LIKED_PHOTOS.replace(/:username/gi, username) +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10) +\r\n            '&order_by=' + (order_by ? order_by : 'latest');\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a list of collections created by the user.\r\n     * @function getUserCollections\r\n     * @memberof UnsplashApi\r\n     * @param {*} username - The username of the user to fetch the portfolio (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    getUserCollections(username, page, per_page) {\r\n        if (!username || username === '' || username === undefined) {\r\n            throw new Error('Parameter : username is required and cannot be empty!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.USERS_COLLECTIONS.replace(/:username/gi, username) +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Pomise factory to retrieve the consolidated number of downloads, views and likes of all user’s photos, \r\n     * as well as the historical breakdown and average of these stats in a specific timeframe.\r\n     * @function getUserStatistics\r\n     * @memberof UnsplashApi\r\n     * @param {*} username - The username of the user to fetch the portfolio (required).\r\n     * @param {String} resolution - The frequency of the stats (Optional; default: 'days').\r\n     * @param {Number} quantity - The amount of for each stat (Optional; default: 30).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    getUserStatistics(username, resolution, quantity) {\r\n        if (!username || username === '' || username === undefined) {\r\n            throw new Error('Parameter : username is required and cannot be empty!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.USERS_STATISTICS.replace(/:username/gi, username) +\r\n            '?resolution=' + (resolution ? encodeURIComponent(resolution) : 'days') +\r\n            '&quantity=' + (quantity ? quantity : 30);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to access the list Photos endpoint of the Unsplash API.\r\n     * @function listPhotos\r\n     * @memberof UnsplashApi\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @param {String} order_by - The sort method for results (Optional, Valid values: latest, oldest, popular; defaults to: latest).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    listPhotos(page, per_page, order_by) {\r\n        if (order_by !== undefined && !this.availableOrders.includes(order_by)) {\r\n            throw new Error('Parameter : order_by has an unsupported value!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.LIST_PHOTOS +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10) +\r\n            '&order_by=' + (order_by ? order_by : 'latest');\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a single page from the list of the curated photos.\r\n     * @function listCuratedPhotos\r\n     * @memberof UnsplashApi\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @param {String} order_by - The sort method for results (Optional, Valid values: latest, oldest, popular; defaults to: latest).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    listCuratedPhotos(page, per_page, order_by) {\r\n        if (order_by !== undefined && !this.availableOrders.includes(order_by)) {\r\n            throw new Error('Parameter : order_by has an unsupported value!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.LIST_CURATED_PHOTOS +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10) +\r\n            '&order_by=' + (order_by ? order_by : 'latest');\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a single photo.\r\n     * @function getAPhoto\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The photo’s ID (required).\r\n     * @param {Number} width - Image width in pixels (optional).\r\n     * @param {Number} height - Image height in pixels (optionl).\r\n     * @param {String} rect - 4 comma-separated integers representing x, y, width, height of the cropped rectangle (optional).\r\n     * @returns {Object} - The JSON data object. \r\n     */\r\n    getAPhoto(id, width, height, rect) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_A_PHOTO.replace(/:id/gi, id) +\r\n            '?w=' + (width && !isNaN(width) ? +width : '') +\r\n            '&h=' + (height && !isNaN(height) ? +height : '') +\r\n            '&rect=' + (rect && rect.typeof === 'string' ? +encodeURIComponent(rect) : '');\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a single random photo, given optional filters.\r\n     * All parameters are optional, and can be combined to narrow the pool of \r\n     * photos from which a random one will be chosen.\r\n     * You can’t use the collections and query parameters in the same request \r\n     * When supplying a count parameter - and only then - the response will be an \r\n     * array of photos, even if the value of count is 1.\r\n     * @function getARandomPhoto\r\n     * @memberof UnsplashApi\r\n     * @param {String} collections - The public collection ID(‘s) to filter selection. If multiple, comma-separated\r\n     * @param {Boolean} featured - Limit selection to featured photos.\r\n     * @param {String} username - Limit selection to a single user.\r\n     * @param {String} query - Limit selection to photos matching a search term.\r\n     * @param {Number} width - The Image width in pixels.\r\n     * @param {Number} height - The Image height in pixels.\r\n     * @param {String} orientation - Filter search results by photo orientation. Valid values are landscape, portrait, and squarish.\r\n     * @param {Number} count - The number of photos to return. (Default: 1; max: 30).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    getARandomPhoto(collections, featured, username, query, width, height, orientation, count) {\r\n        if (!this.availableOrientations.includes(orientation) && orientation !== undefined) {\r\n            throw new Error('Parameter : orientation has an unsupported value!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_A_RANDOM_PHOTO +\r\n            '?collections=' + (collections && !isNaN(collections) ? +encodeURIComponent(collections) : '') +\r\n            '&featured=' + (featured ? featured : false) +\r\n            '&username=' + (username ? username : '') +\r\n            '&query=' + (query ? encodeURIComponent(query) : '') +\r\n            '&width=' + (width ? width : '') +\r\n            '&height=' + (height ? height : '') +\r\n            '&orientation=' + (orientation ? orientation : 'landscape') +\r\n            '&count=' + (count ? count : 1);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve total number of downloads, views and likes of a single photo, \r\n     * as well as the historical breakdown of these stats in a specific timeframe (default is 30 days).\r\n     * @function getPhotoStatistics\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The photo’s ID (required).\r\n     * @param {String} resolution - The frequency of the stats (Optional; default: 'days').\r\n     * @param {Number} quantity - The amount of for each stat (Optional; default: 30).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    getPhotoStatistics(id, resolution, quantity) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_A_PHOTO_STATISTICS.replace(/:id/gi, id) +\r\n            '?resolution=' + (resolution ? encodeURIComponent(resolution) : 'days') +\r\n            '&quantity=' + (quantity ? quantity : 30);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a single photo’s download link. Preferably hit this endpoint \r\n     * if a photo is downloaded in your application for use (example: to be displayed on a blog article, \r\n     * to be shared on social media, to be remixed, etc).\r\n     * This is different than the concept of a view, which is tracked automatically when you hotlinking an image.\r\n     * @function getPhotoLink\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The photo’s ID (required).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    getPhotoLink(id) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_A_PHOTO_DOWNLOAD_LINK.replace(/:id/gi, id);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to update a photo on behalf of the logged-in user. \r\n     * This requires the write_photos scope.\r\n     * @function updatePhoto\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The photo’s ID (required).\r\n     * @param {Object} location - The location object holding location data (Optional).\r\n     * @param {Object} exif - The exif object holding exif data (Optional).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    updatePhoto(id, location, exif) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        location = Object.assign({}, location) || {};\r\n        exif = Object.assign({}, exif) || {};\r\n        let url = this.API_LOCATION + urlConfig.UPDATE_A_PHOTO.replace(/:id/, id) + '?' +\r\n            (location.latitude ? '&location[latitude]=' + encodeURIComponent(location.latitude) : '') +\r\n            (location.longitude ? '&location[longitude]=' + encodeURIComponent(location.longitude) : '') +\r\n            (location.name ? '&location[name]=' + encodeURIComponent(location.name) : '') +\r\n            (location.city ? '&location[city]=' + encodeURIComponent(location.city) : '') +\r\n            (location.country ? '&location[country]=' + encodeURIComponent(location.country) : '') +\r\n            (location.confidential ? '&location[confidential]=' + encodeURIComponent(location.confidential) : '') +\r\n            (exif.make ? '&exif[make]=' + encodeURIComponent(exif.make) : '') +\r\n            (exif.model ? '&exif[model]=' + encodeURIComponent(exif.model) : '') +\r\n            (exif.exposure_time ? '&exif[exposure_time]=' + encodeURIComponent(exif.exposure_time) : '') +\r\n            (exif.aperture_value ? '&exif[aperture_value]=' + encodeURIComponent(exif.aperture_value) : '') +\r\n            (exif.focal_length ? '&exif[focal_length]=' + encodeURIComponent(exif.focal_length) : '') +\r\n            (exif.iso_speed_ratings ? '&exif[iso_speed_ratings]=' + encodeURIComponent(exif.iso_speed_ratings) : '');\r\n        return this.fetchUrl(url, 'PUT');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to like a photo on behalf of the logged-in user. \r\n     * This requires the write_likes scope.\r\n     * This action is idempotent; sending the POST request to a single photo \r\n     * multiple times has no additional effect.\r\n     * @function likePhoto\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The photo’s ID (required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    likePhoto(id) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.LIKE_A_PHOTO.replace(/:id/gi, id);\r\n        return this.fetchUrl(url, 'POST');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to remove a user’s like of a photo.\r\n     * This action is idempotent; sending the DELETE request \r\n     * to a single photo multiple times has no additional effect.\r\n     * @function unlikePhoto\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The photo’s ID (required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    unlikePhoto(id) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.UNLIKE_A_PHOTO.replace(/:id/gi, id);\r\n        return this.fetchUrl(url, 'DELETE');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to access the Search Photos endpoint of the Unsplash API.\r\n     * @function search\r\n     * @memberof UnsplashApi\r\n     * @param {String} query - The search query (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @param {Number} collections - The collection ID(‘s) to narrow the search. If multiple, comma-separated (Optional).\r\n     * @param {String} orientation - Filter search results by photo orientation (Optional, Valid values are landscape, portrait, and squarish, defaults to: landscape).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    search(query, page, per_page, collections, orientation) {\r\n        if (!this.availableOrientations.includes(orientation) && orientation !== undefined) {\r\n            throw new Error('Parameter : orientation has an unsupported value!');\r\n        }\r\n        if (query === undefined) {\r\n            throw new Error('Parameter : query is missing!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.SEARCH_PHOTOS +\r\n            '?query=' + (query ? encodeURIComponent(query) : '') +\r\n            '&page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10) +\r\n            '&collections=' + (collections && !isNaN(collections) ? +collections : '') +\r\n            '&orientation=' + (orientation ? encodeURIComponent(orientation) : '');\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a single page of collection results for a query.\r\n     * @function searchCollections\r\n     * @memberof UnsplashApi\r\n     * @param {String} query - The search query (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    searchCollections(query, page, per_page) {\r\n        if (query === undefined) {\r\n            throw new Error('Parameter : query is missing!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.SEARCH_COLLECTIONS +\r\n            '?query=' + (query ? encodeURIComponent(query) : '') +\r\n            '&page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a single page of user results for a query.\r\n     * @function searchUsers\r\n     * @memberof UnsplashApi\r\n     * @param {String} query - The search query (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    searchUsers(query, page, per_page) {\r\n        if (query === undefined) {\r\n            throw new Error('Parameter : query is missing!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.SEARCH_USERS +\r\n            '?query=' + (query ? encodeURIComponent(query) : '') +\r\n            '&page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a list of counts for all of Unsplash.\r\n     * @function getStatsTotals\r\n     * @memberof UnsplashApi\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    getStatsTotals() {\r\n        let url = this.API_LOCATION + urlConfig.STATS_TOTALS;\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get the overall Unsplash stats for the past 30 days.\r\n     * @function getStatsMonth\r\n     * @memberof UnsplashApi\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    getStatsMonth() {\r\n        let url = this.API_LOCATION + urlConfig.STATS_MONTH;\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a single page from the list of all collections.\r\n     * @function listCollections\r\n     * @memberof UnsplashApi\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    listCollections(page, per_page) {\r\n        let url = this.API_LOCATION + urlConfig.LIST_COLLECTIONS +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a single page from the list of featured collections.\r\n     * @function listFeaturedCollections\r\n     * @memberof UnsplashApi\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    listFeaturedCollections(page, per_page) {\r\n        let url = this.API_LOCATION + urlConfig.LIST_FEATURED_COLLECTIONS +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to get a single page from the list of curated collections.\r\n     * @function listCuratedCollections\r\n     * @memberof UnsplashApi\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1).\r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The JSON data object.\r\n     */\r\n    listCuratedCollections(page, per_page) {\r\n        let url = this.API_LOCATION + urlConfig.LIST_CURATED_COLLECTIONS +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a single collection. \r\n     * To view a user’s private collections, the read_collections scope is required.\r\n     * @function getCollection\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The Collection ID (required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    getCollection(id) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_COLLECTION.replace(/:id/gi, id);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a single curated collection. \r\n     * To view a user’s private collections, the read_collections scope is required.\r\n     * @function getCuratedCollection\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The Collection ID (required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    getCuratedCollection(id) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_CURATED_COLLECTION.replace(/:id/gi, id);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a collection’s photos.\r\n     * @function getCollectionPhotos\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The Collection ID (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1). \r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    getCollectionPhotos(id, page, per_page) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_COLLECTION_PHOTOS.replace(/:id/gi, id) +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a curated collection’s photos.\r\n     * @function getCuratedCollectionPhotos\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The Collection ID (required).\r\n     * @param {Number} page - The page number of results to fetch (Optional, defaults to 1). \r\n     * @param {Number} per_page - The number of items per page (Optional, defaults to 10).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    getCuratedCollectionPhotos(id, page, per_page) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.GET_CURATED_COLLECTION_PHOTOS.replace(/:id/gi, id) +\r\n            '?page=' + (page && !isNaN(page) ? +page : 1) +\r\n            '&per_page=' + (per_page && !isNaN(per_page) ? +per_page : 10);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to retrieve a list of collections related to a particular one.\r\n     * @function listRelatedCollections\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The Collection ID (required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    listRelatedCollections(id) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.LIST_RELATED_COLLECTION.replace(/:id/gi, id);\r\n        return this.fetchUrl(url, 'GET');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to create a new collection. \r\n     * This requires the write_collections scope.\r\n     * @function createNewColection\r\n     * @memberof UnsplashApi\r\n     * @param {String} title - The title of the collection (Required).\r\n     * @param {String} description - The collection’s description (Optional).\r\n     * @param {Boolean} private - Whether to make this collection private (Optional; default false).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    createNewColection(title, description, private_collection) {\r\n        if (!title || title === undefined || title.length === 0) {\r\n            throw new Error('Parameter : title is required!');\r\n        }\r\n        private_collection = private_collection || false;\r\n        let url = this.API_LOCATION + urlConfig.CREATE_NEW_COLLECTION +\r\n            '?title=' + encodeURIComponent(title) +\r\n            (description ? '&description=' + encodeURIComponent(description) : '') +\r\n            '&private=' + private_collection;\r\n        return this.fetchUrl(url, 'POST');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to update an existing collection belonging to the logged-in user. \r\n     * This requires the write_collections scope.\r\n     * @function updateExistingCollection\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The Collection ID (Required).\r\n     * @param {String} title - The title of the collection (Optional).\r\n     * @param {String} description - The collection’s description (Optional).\r\n     * @param {Boolean} private - Whether to make this collection private (Optional; default false).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    updateExistingCollection(id, title, description, private_collection) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        if (!title || title === undefined || title.length === 0) {\r\n            throw new Error('Parameter : title is required!');\r\n        }\r\n        private_collection = private_collection || false;\r\n        let url = this.API_LOCATION + urlConfig.UPDATE_EXISTING_COLLECTION.replace(/:id/gi, id) +\r\n            '?title=' + encodeURIComponent(title) +\r\n            (description ? '&description=' + encodeURIComponent(description) : '') +\r\n            '&private=' + private_collection;\r\n        return this.fetchUrl(url, 'PUT');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to delete a collection belonging to the logged-in user. \r\n     * This requires the write_collections scope.\r\n     * @function deleteCollection\r\n     * @memberof UnsplashApi\r\n     * @param {String} id - The Collection ID (Required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    deleteCollection(id) {\r\n        if (!id || id === undefined || id.length === 0) {\r\n            throw new Error('Parameter : id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.DELETE_COLLECTION.replace(/:id/gi, id);\r\n        return this.fetchUrl(url, 'DELETE');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to add a photo to one of the logged-in user’s collections. \r\n     * Requires the write_collections scope.\r\n     * If the photo is already in the collection, this acion has no effect.\r\n     * @function addPhotoToCollection\r\n     * @memberof UnsplashApi\r\n     * @param {String} collection_id - The collection’s ID (Required).\r\n     * @param {String} photo_id - The photo’s ID (Required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    addPhotoToCollection(collection_id, photo_id) {\r\n        if (!collection_id || collection_id === undefined || collection_id.length === 0) {\r\n            throw new Error('Parameter : collection_id is required!');\r\n        }\r\n        if (!photo_id || photo_id === undefined || photo_id.length === 0) {\r\n            throw new Error('Parameter : photo_id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.ADD_PHOTO_TO_COLLECTION.replace(/:collection_id/gi, collection_id) +\r\n            '?photo_id=' + photo_id;\r\n        return this.fetchUrl(url, 'POST');\r\n    };\r\n\r\n    /**\r\n     * Promise factory to remove a photo from one of the logged-in user’s collections. \r\n     * Requires the write_collections scope.\r\n     * @function removePhotoFromCollection\r\n     * @memberof UnsplashApi\r\n     * @param {String} collection_id - The collection’s ID (Required).\r\n     * @param {String} photo_id - The photo’s ID (Required).\r\n     * @returns {Object} - The updated photo data object.\r\n     */\r\n    removePhotoFromCollection(collection_id, photo_id) {\r\n        if (!collection_id || collection_id === undefined || collection_id.length === 0) {\r\n            throw new Error('Parameter : collection_id is required!');\r\n        }\r\n        if (!photo_id || photo_id === undefined || photo_id.length === 0) {\r\n            throw new Error('Parameter : photo_id is required!');\r\n        }\r\n        let url = this.API_LOCATION + urlConfig.REMOVE_PHOTO_FROM_COLLECTION.replace(/:collection_id/gi, collection_id) +\r\n            '?photo_id=' + photo_id;\r\n        return this.fetchUrl(url, 'DELETE');\r\n    };\r\n}\r\n\r\nmodule.exports = WrapSplashApi;","// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n// (MIT licensed)\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\n/**\n * body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nconst Stream = require('stream');\n\nvar _require = require('stream');\n\nconst PassThrough = _require.PassThrough;\n\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t} else if (body instanceof Blob) {\n\t\t// body is blob\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is array buffer\n\t} else if (body instanceof Stream) {\n\t\t// body is stream\n\t} else {\n\t\t// none of the above\n\t\t// coerce to string\n\t\tbody = String(body);\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof Stream) {\n\t\tbody.on('error', function (err) {\n\t\t\t_this[INTERNALS].error = new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\t// body is null\n\tif (this.body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is string\n\tif (typeof this.body === 'string') {\n\t\treturn Body.Promise.resolve(Buffer.from(this.body));\n\t}\n\n\t// body is blob\n\tif (this.body instanceof Blob) {\n\t\treturn Body.Promise.resolve(this.body[BUFFER]);\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(this.body)) {\n\t\treturn Body.Promise.resolve(this.body);\n\t}\n\n\t// body is buffer\n\tif (Object.prototype.toString.call(this.body) === '[object ArrayBuffer]') {\n\t\treturn Body.Promise.resolve(Buffer.from(this.body));\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(this.body instanceof Stream)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream error, such as incorrect content-encoding\n\t\t_this4.body.on('error', function (err) {\n\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t});\n\n\t\t_this4.body.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\t_this4.body.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof Stream && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Response or Request instance\n */\nfunction extractContentType(instance) {\n\tconst body = instance.body;\n\n\t// istanbul ignore if: Currently, because of a guard in Request, body\n\t// can never be null. Included here for completeness.\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (body instanceof Blob) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is array buffer\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\t// istanbul ignore if: included for completion\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn Buffer.byteLength(body);\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is URLSearchParams\n\t\treturn Buffer.byteLength(String(body));\n\t} else if (body instanceof Blob) {\n\t\t// body is blob\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is array buffer\n\t\treturn body.byteLength;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is URLSearchParams\n\t\tdest.write(Buffer.from(String(body)));\n\t\tdest.end();\n\t} else if (body instanceof Blob) {\n\t\t// body is blob\n\t\tdest.write(body[BUFFER]);\n\t\tdest.end();\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is array buffer\n\t\tdest.write(Buffer.from(body));\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name)) {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) {\n\t\t\t// no op\n\t\t} else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\n/**\n * response.js\n *\n * Response class provides content decoding\n */\n\nvar _require$1 = require('http');\n\nconst STATUS_CODES = _require$1.STATUS_CODES;\n\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders: new Headers(opts.headers)\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url;\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nvar _require$2 = require('url');\n\nconst format_url = _require$2.format;\nconst parse_url = _require$2.parse;\n\n\nconst INTERNALS$2 = Symbol('Request internals');\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parse_url(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parse_url(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parse_url(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (init.body != null) {\n\t\t\tconst contentType = extractContentType(this);\n\t\t\tif (contentType !== null && !headers.has('Content-Type')) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\tif (!headers.has('Connection') && !request.agent) {\n\t\theaders.set('Connection', 'close');\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent: request.agent\n\t});\n}\n\n/**\n * index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nconst http = require('http');\nconst https = require('https');\n\nvar _require$3 = require('stream');\n\nconst PassThrough$1 = _require$3.PassThrough;\n\nvar _require2 = require('url');\n\nconst resolve_url = _require2.resolve;\n\nconst zlib = require('zlib');\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\t\t\tfinalize();\n\t\t});\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tconst locationURL = location === null ? null : resolve_url(request.url, location);\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresolve(new Response(body, response_options));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib.createGunzip(zlibOptions));\n\t\t\t\tresolve(new Response(body, response_options));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresolve(new Response(body, response_options));\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresolve(new Response(body, response_options));\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\n\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// Needed for TypeScript.\nfetch.default = fetch;\n\n// expose Promise\nfetch.Promise = global.Promise;\n\nexport default fetch;\nexport { Headers, Request, Response, FetchError };\n","module.exports = require(\"stream\");","module.exports = require(\"http\");","module.exports = require(\"url\");","module.exports = require(\"https\");","module.exports = require(\"zlib\");","module.exports = require(\"crypto\");"],"sourceRoot":""}